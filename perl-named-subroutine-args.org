# -*- mode:org;mode:auto-fill;fill-column:80 -*-
#+title:  Named Subroutine Arguments in Perl
#+author: Nicholas Hubbard

Naming your subroutine arguments has benefits around increasing the
readability of your code. Lets look at an example:

#+BEGIN_SRC
sub safe_open {

    my $file   = shift;
    my $mode   = shift;
    my $or_die = shift;

    my $success = open(my $fh, $mode, $file);

    if (not $success and $or_die) {
        die "error: failed to open '$file': $!\n";
    }

    return $fh;
}
#+END_SRC

Lets see some examples of how this function works:

#+BEGIN_SRC
my $fh = safe_open('/file/that/doesnt/exist', '>', 1);
print $fh "Hello, World!\n";

# OUTPUT:
# error: failed to open '/file/that/doesnt/exist': No such file or directory
#+END_SRC

#+BEGIN_SRC
my $fh = safe_open('/file/that/doesnt/exist', '>', 0);
print $fh "Hello, World!\n";

# OUTPUT:
# print() on closed filehandle $fh at ./scratch.pl line 22.
#+END_SRC

We can see that the third argument allows us to optionally control if
we should kill the program if the file cannot be opened.

Imagine if somebody who has never worked with this code before comes
across one these calls to =safe_open=. It will be impossible for them
to know what the third option stands for unless they go and look at
the actual code of the subroutine.

To make it easier for people to understand the meaning of the
arguments, we can name them!

#+BEGIN_SRC
sub safe_open {

    my %args = (
        FILE   => '',
        MODE   => '',
        OR_DIE => 1,
        @_
    );

    $args{FILE} or die "error: forgot FILE arg in call to &safe_open\n";
    $args{MODE} or die "error: forgot MODE arg in call to &safe_open\n";

    my $success = open(my $fh, $args{MODE}, $args{FILE});

    if (not $success and $args{OR_DIE}) {
        die "error: failed to open '$args{FILE}': $!\n";
    }

    return $fh;
}
#+END_SRC

Lets look at examples of calling this subroutine:

#+BEGIN_SRC
my $fh = safe_open(FILE => '/file/that/doesnt/exist', MODE => '>', OR_DIE => 1);
print $fh "Hello, World!\n";

# OUTPUT:
# error: failed to open '/file/that/doesnt/exist': No such file or directory
#+END_SRC

#+BEGIN_SRC
my $fh = safe_open(FILE => '/file/that/doesnt/exist', MODE => '>');
print $fh "Hello, World!\n";

# OUTPUT:
# error: failed to open '/file/that/doesnt/exist': No such file or directory
#+END_SRC

#+BEGIN_SRC
my $fh = safe_open(OR_DIE => 0, FILE => '/file/that/doesnt/exist', MODE => '>');
print $fh "Hello, World!\n";

# OUTPUT:
# print() on closed filehandle $fh at ./scratch.pl line 25.
#+END_SRC

There are a few things to note from these examples.

  + The arguments are given names.
  + The argument order does not matter.
  + The OR_DIE argument is optional and defaults to true.

The reason why our subroutine has these features is due to the
strategy we used for construction the =%args= hash. Because hash keys
must be unique, we first set the default values of the keys which will
be overridden if the argument list redefines them. The following code
shows how hash keys are overriden.

#+BEGIN_SRC
my %hash = (
    FOO => 12,
    FOO => 13
);

print $hash{FOO}, "\n";

# OUTPUT:
# 13
#+END_SRC
